version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: suna_lite
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suna_network

  api:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/suna_lite
      - RUNNER_BASE_URL=http://runner:8080
      - COEXISTAI_BASE_URL=${COEXISTAI_BASE_URL:-http://coexistai:8000}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      runner:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    networks:
      - suna_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  runner:
    build: ./docker/runner
    ports:
      - "8080:8080"
    networks:
      - suna_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional CoexistAI service - clone SPThole/CoexistAI into ./coexistai to use
  coexistai:
    build: ./coexistai
    ports:
      - "8001:8000"
    networks:
      - suna_network
    profiles:
      - coexistai

volumes:
  postgres_data:

networks:
  suna_network:
    driver: bridge